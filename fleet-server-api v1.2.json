{
    "openapi": "3.0.0",
    "info":
    {
        "title": "Gett to Fleet API v1.2",
        "description": "Fleet Server API. Compulsory to be used by any new integrating partner. The API needs to be implemented by fleet server in order to receive ASAP from Gett. This version contains changes to the addresses and passenger data objects to support complex routes with multiple pickup and drop-off locations.",
        "contact":
        {
            "name": "Gett"
        },
        "version": "1.2.0-oas3"
    },
    "servers":
    [
        {
            "url": "https://fleet-server-endpoint.com"
        }
    ],
    "security":
    [
        {
            "ApiKeyAuth":
            []
        }
    ],
    "paths":
    {
        "/api/v1/ride_exchange/quotes":
        {
            "post":
            {
                "tags":
                [
                    "v1"
                ],
                "summary": "Request Quotes",
                "description": "<b>Used for Gett to query availability of the service, estimated time for driver arrival and estimated price (if Gett and supplier agree that supplier provides price). </b><br> As this request is very sensitive to present information to users, Gett expects supplier to respond within 5 seconds. High performance of this request is crucial.<br> Quote object inside quotes array represents parameters of a particular supplier. Each request is being sent for a specific service type. Supplier should return 1 quote if they own the service. Supplier may return 1 or more quotes if it aggregates multiple sub-fleets underneath (acts as a marketplace of suppliers).  <br><br><u>Async flow is being considered as redundant, as it's not required to provide a response within 5 seconds! For integrations that already implemented it, it will remain supported.</u> <br> <i>This request is polling until returned status is FINISHED or 15 sec timeout is exceeded. The ID field in the request will contain ID returned in first response by partner. This is for continuous polling of quotes for same request every 3 seconds.</i>",
                "requestBody":
                {
                    "description": "All order information",
                    "content":
                    {
                        "application/json":
                        {
                            "schema":
                            {
                                "$ref": "#/components/schemas/models.QuotesRequest"
                            },
                            "example":
                            {
                                "service_type": "Standard",
                                "scheduled_at": "2024-04-01 01:00:00.000 +01:00",
                                "stop_points":
                                [
                                    {
                                        "id": "",
                                        "rider_phone_number": "",
                                        "rider_name": "",
                                        "rider_id": "",
                                        "lat": 51.4986,
                                        "lng": -0.0205,
                                        "address":
                                        {
                                            "full_address": "Apartment 2904, Talisman Tower, 6 Lincoln Plaza, London E14 9BP",
                                            "address_type": "establishment",
                                            "place_id": "",
                                            "city": "London",
                                            "street": "Lincoln Plaza",
                                            "house": "6",
                                            "housing": "",
                                            "building": "",
                                            "entrance": "",
                                            "poi": false,
                                            "poi_name": "",
                                            "poi_type": "",
                                            "postcode": "",
                                            "state": "",
                                            "country": "UK",
                                            "county": "",
                                            "notes": "",
                                            "provider": "",
                                            "poi_provider": "",
                                            "poi_place_id": "",
                                            "mandatory_pickup": null,
                                            "iata": ""
                                        },
                                        "stop_point_type": "origin"
                                    },
                                    {
                                        "id": "",
                                        "rider_phone_number": "",
                                        "rider_name": "",
                                        "rider_id": "",
                                        "lat": 51.5139287,
                                        "lng": -0.0883581,
                                        "address":
                                        {
                                            "full_address": "Bank of England, Threadneedle St, London EC2R 8AH, UK",
                                            "address_type": "premise",
                                            "place_id": "",
                                            "city": "London",
                                            "street": "Threadneedle Street",
                                            "house": "",
                                            "housing": "",
                                            "building": "",
                                            "entrance": "",
                                            "poi": true,
                                            "poi_name": "Bank of England",
                                            "poi_type": "",
                                            "postcode": "",
                                            "state": "",
                                            "country": "UK",
                                            "county": "",
                                            "notes": "",
                                            "provider": "",
                                            "poi_provider": "",
                                            "poi_place_id": "",
                                            "mandatory_pickup": null,
                                            "iata": ""
                                        },
                                        "stop_point_type": "on_going"
                                    },
                                    {
                                        "id": "",
                                        "rider_phone_number": "",
                                        "rider_name": "",
                                        "rider_id": "",
                                        "lat": 51.45978,
                                        "lng": -0.447715,
                                        "address":
                                        {
                                            "full_address": "Heathrow Terminal 4, Heathrow Airport, Heathrow Airport (LHR), Terminal 4, Nelson Rd, Hounslow TW6 3XA, UK",
                                            "address_type": "airport",
                                            "place_id": "",
                                            "city": "Hounslow",
                                            "street": "Nelson Road",
                                            "house": "",
                                            "housing": "",
                                            "building": "",
                                            "entrance": "",
                                            "poi": true,
                                            "poi_name": "Heathrow Terminal 4",
                                            "poi_type": "",
                                            "postcode": "",
                                            "state": "",
                                            "country": "UK",
                                            "county": "",
                                            "notes": "",
                                            "provider": "",
                                            "poi_provider": "",
                                            "poi_place_id": "",
                                            "mandatory_pickup": null,
                                            "iata": "LHR"
                                        },
                                        "stop_point_type": "destination"
                                    }
                                ],
                                "currency_code": "GBP"
                            }
                        }
                    },
                    "required": true
                },
                "responses":
                {
                    "200":
                    {
                        "description": "Quotes Response â€“ a list of available options; can be either empty, one or many.",
                        "content":
                        {
                            "application/json":
                            {
                                "schema":
                                {
                                    "$ref": "#/components/schemas/models.QuotesResponse"
                                },
                                "examples":
                                {
                                    "No Service":
                                    {
                                        "value":
                                        {
                                            "id": "quotes_request_id",
                                            "quotes":
                                            [],
                                            "retrieving_state": "FINISHED",
                                            "expiration_seconds": 0
                                        }
                                    },
                                    "Single Supplier":
                                    {
                                        "value":
                                        {
                                            "id": "quotes_request_id",
                                            "quotes":
                                            [
                                                {
                                                    "id": "1",
                                                    "min_eta": 1,
                                                    "max_eta": 3,
                                                    "min_price":
                                                    {
                                                        "base_fare": 10,
                                                        "surge_amount": 10,
                                                        "tax_amount": 4.2,
                                                        "total_fare": 21
                                                    },
                                                    "max_price":
                                                    {
                                                        "base_fare": 20,
                                                        "surge_amount": 20,
                                                        "tax_amount": 8.2,
                                                        "total_fare": 41
                                                    },
                                                    "surged": true,
                                                    "currency": "Â£",
                                                    "currency_code": "GBP"
                                                }
                                            ],
                                            "retrieving_state": "FINISHED",
                                            "expiration_seconds": 300
                                        }
                                    },
                                    "Many Suppliers (sub-fleets)":
                                    {
                                        "value":
                                        {
                                            "id": "quotes_request_id",
                                            "quotes":
                                            [
                                                {
                                                    "id": "1",
                                                    "min_eta": 1,
                                                    "max_eta": 3,
                                                    "min_price":
                                                    {
                                                        "base_fare": 10,
                                                        "surge_amount": 10,
                                                        "tax_amount": 4.2,
                                                        "total_fare": 21
                                                    },
                                                    "max_price":
                                                    {
                                                        "base_fare": 20,
                                                        "surge_amount": 20,
                                                        "tax_amount": 8.2,
                                                        "total_fare": 41
                                                    },
                                                    "surged": true,
                                                    "currency": "Â£",
                                                    "currency_code": "GBP",
                                                    "sub_fleet_name": "Subfleet 1"
                                                },
                                                {
                                                    "id": "2",
                                                    "min_eta": 5,
                                                    "max_eta": 10,
                                                    "min_price":
                                                    {
                                                        "base_fare": 10,
                                                        "surge_amount": 10,
                                                        "tax_amount": 4.2,
                                                        "total_fare": 21
                                                    },
                                                    "max_price":
                                                    {
                                                        "base_fare": 20,
                                                        "surge_amount": 20,
                                                        "tax_amount": 8.2,
                                                        "total_fare": 41
                                                    },
                                                    "surged": true,
                                                    "currency": "Â£",
                                                    "currency_code": "GBP",
                                                    "sub_fleet_name": "Subfleet 2"
                                                }
                                            ],
                                            "retrieving_state": "FINISHED",
                                            "expiration_seconds": 300
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400":
                    {
                        "description": "Invalid request",
                        "content":
                        {
                            "text/plain":
                            {
                                "schema":
                                {
                                    "$ref": "#/components/schemas/inline_response_400"
                                }
                            }
                        }
                    },
                    "500":
                    {
                        "description": "Server error",
                        "content":
                        {
                            "text/plain":
                            {
                                "schema":
                                {
                                    "$ref": "#/components/schemas/inline_response_400"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/ride_exchange/current_order":
        {
            "post":
            {
                "tags":
                [
                    "v1"
                ],
                "summary": "Receive ASAP Order",
                "description": "This endpoint will be called when Gett passes new ASAP order to the fleet. This request should return 201 in case order created successfully. 400 if request with given parameters cannot be satisfied. There is a chance this request will be sent several times with same order ID. In this case the fleet server is required to return 201. This can happen if there is a network disconnect and Gett server performs retry. If 500 returned, Gett server will perform retry.",
                "requestBody":
                {
                    "description": "All order information",
                    "content":
                    {
                        "application/json":
                        {
                            "schema":
                            {
                                "$ref": "#/components/schemas/models.ReceiveOrderRequest"
                            },
                            "example":
                            {
                                "order_id": "gl:1674121209:3:1",
                                "order_comment": "Call me on arrival",
                                "rider_phone_number": "447000000000",
                                "rider_first_name": "Max",
                                "rider_last_name": "S",
                                "service_type": "Standard",
                                "price": 10.1,
                                "currency": "GBP",
                                "quote_id": "1",
                                "reference_order_id": "1674121209",
                                "rider_vip": { "is_vip": true },
                                "stop_points_info":
                                {
                                    "stop_points":
                                    [
                                        {
                                            "lat": 51.4986,
                                            "lng": -0.0205,
                                            "address":
                                            {
                                                "full_address": "Apartment 2904, Talisman Tower, 6 Lincoln Plaza, London E14 9BP",
                                                "address_type": "",
                                                "place_id": "",
                                                "city": "London",
                                                "street": "Lincoln Plaza",
                                                "house": "6",
                                                "housing": "",
                                                "building": "",
                                                "entrance": "",
                                                "poi": false,
                                                "poi_name": "",
                                                "poi_type": "",
                                                "postcode": "E14 9BP",
                                                "state": "Tower Hamlets",
                                                "country": "United Kingdom",
                                                "county": "",
                                                "notes": "",
                                                "provider": "",
                                                "poi_provider": "",
                                                "poi_place_id": "",
                                                "mandatory_pickup": null,
                                                "iata": ""
                                            },
                                            "id": "ea9d4fce-bca2-4ec8-a0f5-423c573e11bf",
                                            "stop_point_type": "origin",
                                            "riders":
                                            [
                                                {
                                                    "phone_number": "447000000000",
                                                    "name": "Max S",
                                                    "stop_point_action": "pick_up"
                                                }
                                            ],
                                            "planned_arrival_at": null
                                        },
                                        {
                                            "lat": 51.5139287,
                                            "lng": -0.0883581,
                                            "address":
                                            {
                                                "full_address": "Bank of England, Threadneedle St, London EC2R 8AH, UK",
                                                "address_type": "",
                                                "place_id": "",
                                                "city": "London",
                                                "street": "Threadneedle Street",
                                                "house": "",
                                                "housing": "",
                                                "building": "",
                                                "entrance": "",
                                                "poi": true,
                                                "poi_name": "Bank of England",
                                                "poi_type": "",
                                                "postcode": "EC2R 8AH",
                                                "state": "England",
                                                "country": "United Kingdom",
                                                "county": "",
                                                "notes": "",
                                                "provider": "",
                                                "poi_provider": "",
                                                "poi_place_id": "",
                                                "mandatory_pickup": null,
                                                "iata": ""
                                            },
                                            "id": "aa401301-b616-4caf-967d-de6df9c674d2",
                                            "stop_point_type": "on_going",
                                            "riders":
                                            [
                                                {
                                                    "phone_number": "447000000000",
                                                    "name": "Max S",
                                                    "stop_point_action": "stop_by"
                                                }
                                            ],
                                            "planned_arrival_at": null
                                        },
                                        {
                                            "lat": 51.45978,
                                            "lng": -0.447715,
                                            "address":
                                            {
                                                "full_address": "Heathrow Terminal 4, Heathrow Airport, Heathrow Airport, Terminal 4, Nelson Rd, Hounslow TW6 3XA, UK",
                                                "address_type": "",
                                                "place_id": "",
                                                "city": "Hounslow",
                                                "street": "Nelson Road",
                                                "house": "",
                                                "housing": "",
                                                "building": "",
                                                "entrance": "",
                                                "poi": true,
                                                "poi_name": "Heathrow Terminal 4",
                                                "poi_type": "",
                                                "postcode": "TW6 3XA",
                                                "state": "England",
                                                "country": "United Kingdom",
                                                "county": "",
                                                "notes": "",
                                                "provider": "",
                                                "poi_provider": "",
                                                "poi_place_id": "",
                                                "mandatory_pickup": null,
                                                "iata": "LHR"
                                            },
                                            "id": "ee37bdaa-c71a-4b8e-8b64-32ace0dd09f9",
                                            "stop_point_type": "destination",
                                            "riders":
                                            [
                                                {
                                                    "phone_number": "447000000000",
                                                    "name": "Max S",
                                                    "stop_point_action": "drop_off"
                                                }
                                            ],
                                            "planned_arrival_at": null
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses":
                {
                    "201":
                    {
                        "description": "Empty response"
                    },
                    "400":
                    {
                        "description": "Invalid request",
                        "content":
                        {
                            "text/plain":
                            {
                                "schema":
                                {
                                    "$ref": "#/components/schemas/inline_response_400"
                                }
                            }
                        }
                    },
                    "500":
                    {
                        "description": "Server error",
                        "content":
                        {
                            "text/plain":
                            {
                                "schema":
                                {
                                    "$ref": "#/components/schemas/inline_response_400"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/ride_exchange/future_order":
        {
            "post":
            {
                "tags":
                [
                    "v1"
                ],
                "summary": "Receive Future Order",
                "description": "This endpoint will be called when Gett passes new future order to the fleet. This request should return 201 in case order created successfully. 400 if request with given parameters cannot be satisfied. There is a chance this request will be sent several times with same order ID. In this case the fleet server is required to return 201. This can happen if there is a network disconnect and Gett server performs retry. If 500 returned, Gett server will perform retry.",
                "requestBody":
                {
                    "description": "All order information",
                    "content":
                    {
                        "application/json":
                        {
                            "schema":
                            {
                                "$ref": "#/components/schemas/models.ReceiveFutureOrderRequest"
                            },
                            "example":
                            {
                                "order_id": "gl:1674121209:3:1",
                                "order_comment": "Call me on arrival",
                                "rider_phone_number": "441000000000",
                                "rider_first_name": "Paul",
                                "rider_last_name": "B",
                                "scheduled_at": "2024-04-01 01:00:00.000 +01:00",
                                "service_type": "Standard",
                                "price": 10.1,
                                "currency": "GBP",
                                "quote_id": "1",
                                "reference_order_id": "1674121209",
                                "rider_vip": { "is_vip": false },
                                "stop_points_info":
                                {
                                    "stop_points":
                                    [
                                        {
                                            "lat": 51.4986,
                                            "lng": -0.0205,
                                            "address":
                                            {
                                                "full_address": "Talisman Tower, 6 Lincoln Plaza, London E14 9BP",
                                                "address_type": "",
                                                "place_id": "",
                                                "city": "London",
                                                "street": "Lincoln Plaza",
                                                "house": "6",
                                                "housing": "",
                                                "building": "",
                                                "entrance": "",
                                                "poi": false,
                                                "poi_name": "",
                                                "poi_type": "",
                                                "postcode": "E14 9BP",
                                                "state": "Tower Hamlets",
                                                "country": "United Kingdom",
                                                "county": "",
                                                "notes": "",
                                                "provider": "",
                                                "poi_provider": "",
                                                "poi_place_id": "",
                                                "mandatory_pickup": null,
                                                "iata": ""
                                            },
                                            "id": "ea9d4fce-bca2-4ec8-a0f5-423c573e11bf",
                                            "stop_point_type": "origin",
                                            "riders":
                                            [
                                                {
                                                    "phone_number": "447000000000",
                                                    "name": "Max S",
                                                    "stop_point_action": "pick_up"
                                                }
                                            ],
                                            "planned_arrival_at": "2024-04-01 01:00:00.000 +01:00"
                                        },
                                        {
                                            "lat": 51.5139287,
                                            "lng": -0.0883581,
                                            "address":
                                            {
                                                "full_address": "Bank of England, Threadneedle St, London EC2R 8AH, UK",
                                                "address_type": "",
                                                "place_id": "",
                                                "city": "London",
                                                "street": "Threadneedle Street",
                                                "house": "",
                                                "housing": "",
                                                "building": "",
                                                "entrance": "",
                                                "poi": true,
                                                "poi_name": "Bank of England",
                                                "poi_type": "",
                                                "postcode": "EC2R 8AH",
                                                "state": "England",
                                                "country": "United Kingdom",
                                                "county": "",
                                                "notes": "",
                                                "provider": "",
                                                "poi_provider": "",
                                                "poi_place_id": "",
                                                "mandatory_pickup": null,
                                                "iata": ""
                                            },
                                            "id": "aa401301-b616-4caf-967d-de6df9c674d2",
                                            "stop_point_type": "on_going",
                                            "riders":
                                            [
                                                {
                                                    "phone_number": "447000000000",
                                                    "name": "Max S",
                                                    "stop_point_action": "stop_by"
                                                }
                                            ],
                                            "planned_arrival_at": "2024-04-01 01:30:00.000 +01:00"
                                        },
                                        {
                                            "lat": 51.45978,
                                            "lng": -0.447715,
                                            "address":
                                            {
                                                "full_address": "Heathrow Terminal 4, Heathrow Airport, Heathrow Airport, Terminal 4, Nelson Rd, Hounslow TW6 3XA, UK",
                                                "address_type": "",
                                                "place_id": "",
                                                "city": "Hounslow",
                                                "street": "Nelson Road",
                                                "house": "",
                                                "housing": "",
                                                "building": "",
                                                "entrance": "",
                                                "poi": true,
                                                "poi_name": "Heathrow Terminal 4",
                                                "poi_type": "",
                                                "postcode": "TW6 3XA",
                                                "state": "England",
                                                "country": "United Kingdom",
                                                "county": "",
                                                "notes": "",
                                                "provider": "",
                                                "poi_provider": "",
                                                "poi_place_id": "",
                                                "mandatory_pickup": null,
                                                "iata": "LHR"
                                            },
                                            "id": "ee37bdaa-c71a-4b8e-8b64-32ace0dd09f9",
                                            "stop_point_type": "destination",
                                            "riders":
                                            [
                                                {
                                                    "phone_number": "447000000000",
                                                    "name": "Max S",
                                                    "stop_point_action": "drop_off"
                                                }
                                            ],
                                            "planned_arrival_at": "2024-04-01 02:00:00.000 +01:00"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses":
                {
                    "201":
                    {
                        "description": "Empty response"
                    },
                    "400":
                    {
                        "description": "Invalid request",
                        "content":
                        {
                            "text/plain":
                            {
                                "schema":
                                {
                                    "$ref": "#/components/schemas/inline_response_400"
                                }
                            }
                        }
                    },
                    "500":
                    {
                        "description": "Server error",
                        "content":
                        {
                            "text/plain":
                            {
                                "schema":
                                {
                                    "$ref": "#/components/schemas/inline_response_400"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/ride_exchange/update_order":
        {
            "put":
            {
                "tags":
                [
                    "v1"
                ],
                "summary": "Order Details Update",
                "description": "This endpoint will be called when Gett order is being updated - for example rider changes the destination. This request should return 201 in case order created successfully. 400 if request with given parameters cannot be satisfied. There is a chance this request will be sent several times with same order ID. In this case the fleet server is required to return 201. This can happen if there is a network disconnect and Gett server performs retry. If 500 returned, Gett server will perform retry.",
                "requestBody":
                {
                    "description": "All order information",
                    "content":
                    {
                        "application/json":
                        {
                            "schema":
                            {
                                "$ref": "#/components/schemas/models.ReceiveFutureOrderRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses":
                {
                    "201":
                    {
                        "description": "Empty response"
                    },
                    "400":
                    {
                        "description": "Invalid request",
                        "content":
                        {
                            "text/plain":
                            {
                                "schema":
                                {
                                    "$ref": "#/components/schemas/inline_response_400"
                                }
                            }
                        }
                    },
                    "500":
                    {
                        "description": "Server error",
                        "content":
                        {
                            "text/plain":
                            {
                                "schema":
                                {
                                    "$ref": "#/components/schemas/inline_response_400"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/ride_exchange/order/{order_id}":
        {
            "delete":
            {
                "tags":
                [
                    "v1"
                ],
                "summary": "Order Cancellation",
                "description": "This endpoint will be called when Gett order is canceled. Upon agreement, cancellation fee can be calculated by Gett or partner. This request should return 204 in case order canceled successfully and fee is calculated by Gett. 200 response should be returned along with cancellation fee. 400 if request with given parameters cannot be satisfied. There is a chance this request will be sent several times with same order ID. In this case the fleet server is required to return 201. This can happen if there is a network disconnect and Gett server performs retry. If 500 returned, Gett server will perform retry.",
                "parameters":
                [
                    {
                        "name": "order_id",
                        "in": "path",
                        "description": "order id",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema":
                        {
                            "type": "string"
                        }
                    }
                ],
                "responses":
                {
                    "200":
                    {
                        "description": "Return with cancellation in the body",
                        "content":
                        {
                            "application/json":
                            {
                                "schema":
                                {
                                    "$ref": "#/components/schemas/models.CancellationWithFee"
                                },
                                "examples":
                                {
                                    "No fee":
                                    {
                                        "value":
                                        {
                                            "cancellation_fare":
                                            {
                                                "cancellation_base_fare": 0,
                                                "tax_amount": 0,
                                                "total_fare": 0,
                                                "waiting_time":
                                                {
                                                    "minutes_free": 10,
                                                    "minutes_charged": 0,
                                                    "waiting_time_cost": 0
                                                }
                                            }
                                        }
                                    },
                                    "Paid cancellation":
                                    {
                                        "value":
                                        {
                                            "cancellation_fare":
                                            {
                                                "cancellation_base_fare": 10,
                                                "tax_amount": 1,
                                                "total_fare": 15,
                                                "waiting_time":
                                                {
                                                    "minutes_free": 10,
                                                    "minutes_charged": 4,
                                                    "waiting_time_cost": 4
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "204":
                    {
                        "description": "Success return empty JSON"
                    },
                    "400":
                    {
                        "description": "Invalid request",
                        "content":
                        {
                            "text/plain":
                            {
                                "schema":
                                {
                                    "$ref": "#/components/schemas/inline_response_400"
                                }
                            }
                        }
                    },
                    "500":
                    {
                        "description": "Server error",
                        "content":
                        {
                            "text/plain":
                            {
                                "schema":
                                {
                                    "$ref": "#/components/schemas/inline_response_400"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/ride_exchange/driver/{driver_id}/picture":
        {
            "get":
            {
                "tags":
                [
                    "v1"
                ],
                "summary": "Upload Driver Picture",
                "description": "Photo of driver. <br>This endpoint will be called if driver has_picure attribute set to true when fleet calls /accept API. This API will be called once for each driver ID.<br>Recommended parameters are JPEG square photo with 1000px resolution.",
                "parameters":
                [
                    {
                        "name": "driver_id",
                        "in": "path",
                        "description": "same driver_id submitted on Accept Order",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema":
                        {
                            "type": "string"
                        }
                    }
                ],
                "responses":
                {
                    "200":
                    {
                        "description": "Submission of driver photo",
                        "content":
                        {
                            "image/jpeg":
                            {
                                "schema":
                                {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "400":
                    {
                        "description": "Invalid request",
                        "content":
                        {
                            "text/plain":
                            {
                                "schema":
                                {
                                    "$ref": "#/components/schemas/inline_response_400"
                                }
                            }
                        }
                    },
                    "500":
                    {
                        "description": "Server error",
                        "content":
                        {
                            "text/plain":
                            {
                                "schema":
                                {
                                    "$ref": "#/components/schemas/inline_response_400"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/ride_exchange/drivers/nearby":
        {
            "post":
            {
                "tags":
                [
                    "v1"
                ],
                "summary": "Return Nearby Drivers",
                "description": "This API to be called to request information about drivers near a client to show them on the map in the client app. This endpoint will be polled every 5 seconds until the moment client places a booking.",
                "requestBody":
                {
                    "description": "Info about client location and service types presented.",
                    "content":
                    {
                        "application/json":
                        {
                            "schema":
                            {
                                "$ref": "#/components/schemas/models.NearbyDriversRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses":
                {
                    "200":
                    {
                        "description": "Return list of drivers and their recent locations.",
                        "content":
                        {
                            "application/json":
                            {
                                "schema":
                                {
                                    "$ref": "#/components/schemas/models.NearbyDriversResponse"
                                },
                                "examples":
                                {
                                    "NoDrivers":
                                    {
                                        "value":
                                        {
                                            "nearby_drivers":
                                            {
                                                "Economy":
                                                []
                                            }
                                        }
                                    },
                                    "OneService":
                                    {
                                        "value":
                                        {
                                            "nearby_drivers":
                                            [
                                                {
                                                    "Economy":
                                                    [
                                                        {
                                                            "driver_id": "1",
                                                            "locations":
                                                            [
                                                                {
                                                                    "lat": 55.721491,
                                                                    "lng": 37.610801,
                                                                    "bearing": 155,
                                                                    "timestamp": "2000-01-01 00:00:04.000 +00:00"
                                                                },
                                                                {
                                                                    "lat": 55.751263,
                                                                    "lng": 37.6846099,
                                                                    "bearing": 70,
                                                                    "timestamp": "2000-01-01 00:00:03.000 +00:00"
                                                                },
                                                                {
                                                                    "lat": 55.752278,
                                                                    "lng": 37.6166099,
                                                                    "bearing": 97,
                                                                    "timestamp": "2000-01-01 00:00:02.000 +00:00"
                                                                },
                                                                {
                                                                    "lat": 55.752278,
                                                                    "lng": 37.6156099,
                                                                    "bearing": 101,
                                                                    "timestamp": "2000-01-01 00:00:01.000 +00:00"
                                                                },
                                                                {
                                                                    "lat": 55.752278,
                                                                    "lng": 37.6146099,
                                                                    "bearing": 335,
                                                                    "timestamp": "2000-01-01 00:00:00.000 +00:00"
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    },
                                    "ManyServices":
                                    {
                                        "value":
                                        {
                                            "nearby_drivers":
                                            [
                                                {
                                                    "Economy":
                                                    [
                                                        {
                                                            "driver_id": "1",
                                                            "locations":
                                                            [
                                                                {
                                                                    "lat": 55.721491,
                                                                    "lng": 37.610801,
                                                                    "bearing": 155,
                                                                    "timestamp": "2000-01-01 00:00:04.000 +00:00"
                                                                },
                                                                {
                                                                    "lat": 55.751263,
                                                                    "lng": 37.6846099,
                                                                    "bearing": 70,
                                                                    "timestamp": "2000-01-01 00:00:03.000 +00:00"
                                                                },
                                                                {
                                                                    "lat": 55.752278,
                                                                    "lng": 37.6166099,
                                                                    "bearing": 97,
                                                                    "timestamp": "2000-01-01 00:00:02.000 +00:00"
                                                                },
                                                                {
                                                                    "lat": 55.752278,
                                                                    "lng": 37.6156099,
                                                                    "bearing": 101,
                                                                    "timestamp": "2000-01-01 00:00:01.000 +00:00"
                                                                },
                                                                {
                                                                    "lat": 55.752278,
                                                                    "lng": 37.6146099,
                                                                    "bearing": 335,
                                                                    "timestamp": "2000-01-01 00:00:00.000 +00:00"
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "driver_id": "2",
                                                            "locations":
                                                            [
                                                                {
                                                                    "lat": 55.721491,
                                                                    "lng": 37.610801,
                                                                    "bearing": 155,
                                                                    "timestamp": "2000-01-01 00:00:04.000 +00:00"
                                                                },
                                                                {
                                                                    "lat": 55.751263,
                                                                    "lng": 37.6846099,
                                                                    "bearing": 70,
                                                                    "timestamp": "2000-01-01 00:00:03.000 +00:00"
                                                                },
                                                                {
                                                                    "lat": 55.752278,
                                                                    "lng": 37.6166099,
                                                                    "bearing": 97,
                                                                    "timestamp": "2000-01-01 00:00:02.000 +00:00"
                                                                },
                                                                {
                                                                    "lat": 55.752278,
                                                                    "lng": 37.6156099,
                                                                    "bearing": 101,
                                                                    "timestamp": "2000-01-01 00:00:01.000 +00:00"
                                                                },
                                                                {
                                                                    "lat": 55.752278,
                                                                    "lng": 37.6146099,
                                                                    "bearing": 335,
                                                                    "timestamp": "2000-01-01 00:00:00.000 +00:00"
                                                                }
                                                            ]
                                                        }
                                                    ],
                                                    "Standard":
                                                    [
                                                        {
                                                            "driver_id": "3",
                                                            "locations":
                                                            [
                                                                {
                                                                    "lat": 55.721491,
                                                                    "lng": 37.610801,
                                                                    "bearing": 155,
                                                                    "timestamp": "2000-01-01 00:00:04.000 +00:00"
                                                                },
                                                                {
                                                                    "lat": 55.751263,
                                                                    "lng": 37.6846099,
                                                                    "bearing": 70,
                                                                    "timestamp": "2000-01-01 00:00:03.000 +00:00"
                                                                },
                                                                {
                                                                    "lat": 55.752278,
                                                                    "lng": 37.6166099,
                                                                    "bearing": 97,
                                                                    "timestamp": "2000-01-01 00:00:02.000 +00:00"
                                                                },
                                                                {
                                                                    "lat": 55.752278,
                                                                    "lng": 37.6156099,
                                                                    "bearing": 101,
                                                                    "timestamp": "2000-01-01 00:00:01.000 +00:00"
                                                                },
                                                                {
                                                                    "lat": 55.752278,
                                                                    "lng": 37.6146099,
                                                                    "bearing": 335,
                                                                    "timestamp": "2000-01-01 00:00:00.000 +00:00"
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400":
                    {
                        "description": "Invalid request",
                        "content":
                        {
                            "text/plain":
                            {
                                "schema":
                                {
                                    "$ref": "#/components/schemas/inline_response_400"
                                }
                            }
                        }
                    },
                    "500":
                    {
                        "description": "Server error",
                        "content":
                        {
                            "text/plain":
                            {
                                "schema":
                                {
                                    "$ref": "#/components/schemas/inline_response_400"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/ride_exchange/order/{order_id}/riderontheway":
        {
            "post":
            {
                "tags":
                [
                    "v1"
                ],
                "summary": "Notified Rider Is Coming",
                "description": "This API gets called when client presses \"I'll be there\" button in Gett client app after driver arrival. To be used to notify driver that rider is aware of driver arrival to pickup and they will be around soon",
                "parameters":
                [
                    {
                        "name": "order_id",
                        "in": "path",
                        "description": "order id",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema":
                        {
                            "type": "string"
                        }
                    }
                ],
                "requestBody":
                {
                    "description": "No info",
                    "content":
                    {
                        "application/json":
                        {
                            "schema":
                            {
                                "type": "object"
                            },
                            "example":
                            {}
                        }
                    },
                    "required": true
                },
                "responses":
                {
                    "204":
                    {
                        "description": "Successfully processed"
                    },
                    "400":
                    {
                        "description": "Invalid request",
                        "content":
                        {
                            "text/plain":
                            {
                                "schema":
                                {
                                    "$ref": "#/components/schemas/inline_response_400"
                                }
                            }
                        }
                    },
                    "500":
                    {
                        "description": "Server error",
                        "content":
                        {
                            "text/plain":
                            {
                                "schema":
                                {
                                    "$ref": "#/components/schemas/inline_response_400"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/ride_exchange/order/{order_id}/post_ride_update":
        {
            "post":
            {
                "tags":
                [
                    "v1"
                ],
                "summary": "Rider Provided Tips",
                "description": "For B2C rides only, optional. This API will be called shortly after Complete status submission to provide amount of tips that rider decided to give the driver for the order.",
                "parameters":
                [
                    {
                        "name": "order_id",
                        "in": "path",
                        "description": "order id",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema":
                        {
                            "type": "string"
                        }
                    }
                ],
                "requestBody":
                {
                    "description": "Detailed information about tips amount",
                    "content":
                    {
                        "application/json":
                        {
                            "schema":
                            {
                                "$ref": "#/components/schemas/models.PostRideUpdate"
                            },
                            "examples":
                            {
                                "Tips provided":
                                {
                                    "value":
                                    {
                                        "calculation":
                                        {
                                            "tips":
                                            {
                                                "amount_without_taxes": 153.75,
                                                "taxes": 30.75,
                                                "amount_with_taxes": 184.5
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses":
                {
                    "204":
                    {
                        "description": "Successfully processed"
                    },
                    "400":
                    {
                        "description": "Invalid request",
                        "content":
                        {
                            "text/plain":
                            {
                                "schema":
                                {
                                    "$ref": "#/components/schemas/inline_response_400"
                                }
                            }
                        }
                    },
                    "500":
                    {
                        "description": "Server error",
                        "content":
                        {
                            "text/plain":
                            {
                                "schema":
                                {
                                    "$ref": "#/components/schemas/inline_response_400"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/ride_exchange/order/sync":
        {
            "post":
            {
                "tags":
                [
                    "v1"
                ],
                "summary": "Order Synchronisation API",
                "description": "API is used to regularly check order statuses between Gett and a partner to avoid any desync happening during an order lifetime. Sync is called about every minute and stops when order is Completed, Cancelled or Un-reserved, Rejected by a Supplier.",
                "requestBody":
                {
                    "description": "Detailed information about tips amount",
                    "content":
                    {
                        "application/json":
                        {
                            "schema":
                            {
                                "$ref": "#/components/schemas/order_sync_body"
                            }
                        }
                    }
                },
                "responses":
                {
                    "204":
                    {
                        "description": "Successfully processed",
                        "content":
                        {
                            "application/json":
                            {
                                "schema":
                                {
                                    "$ref": "#/components/schemas/inline_response_204"
                                }
                            }
                        }
                    },
                    "400":
                    {
                        "description": "Invalid request",
                        "content":
                        {
                            "text/plain":
                            {
                                "schema":
                                {
                                    "$ref": "#/components/schemas/inline_response_400"
                                }
                            }
                        }
                    },
                    "500":
                    {
                        "description": "Server error",
                        "content":
                        {
                            "text/plain":
                            {
                                "schema":
                                {
                                    "$ref": "#/components/schemas/inline_response_400"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components":
    {
        "schemas":
        {
            "common_types.Address":
            {
                "title": "address",
                "description": "Breakdown of the address. Provided either by Google or PostCodeAnywhere (UK-only). Address is provided in the local language of the order request country.",
                "type": "object",
                "properties":
                {
                    "full_address":
                    {
                        "type": "string",
                        "description": "Human readable full address of the location"
                    },
                    "house":
                    {
                        "type": "string"
                    },
                    "housing":
                    {
                        "type": "string"
                    },
                    "street":
                    {
                        "type": "string"
                    },
                    "poi":
                    {
                        "type": "boolean",
                        "description": "flag whether address is Point of interest"
                    },
                    "poi_name":
                    {
                        "type": "string"
                    },
                    "city":
                    {
                        "type": "string"
                    },
                    "country":
                    {
                        "type": "string"
                    },
                    "postcode":
                    {
                        "type": "string"
                    },
                    "IATA":
                    {
                        "type": "string",
                        "description": "If address is airport, the IATA code of the airport will be provided. Regardless of the flight info presence."
                    }
                }
            },
            "common_types.Location":
            {
                "type": "object",
                "properties":
                {
                    "address":
                    {
                        "$ref": "#/components/schemas/common_types.Address"
                    },
                    "lat":
                    {
                        "type": "number",
                        "format": "double"
                    },
                    "lng":
                    {
                        "type": "number",
                        "format": "double"
                    }
                }
            },
            "models.ReceiveFutureOrderRequest":
            {
                "title": "ReceiveFutureOrderRequest",
                "type": "object",
                "properties":
                {
                    "order_id":
                    {
                        "type": "string"
                    },
                    "quote_id":
                    {
                        "type": "string",
                        "description": "Optional. Provided only if Fleet previously responded to Request Quotes. request."
                    },
                    "reference_order_id":
                    {
                        "type": "string",
                        "description": "Gett order ID for reference"
                    },
                    "scheduled_at":
                    {
                        "pattern": "^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}.\\d{3} \\+\\d{2}:\\d{2}$",
                        "type": "string",
                        "description": "The timestamp of arrival to pickup",
                        "format": "date-time"
                    },
                    "rider_first_name":
                    {
                        "type": "string"
                    },
                    "rider_last_name":
                    {
                        "type": "string"
                    },
                    "rider_phone_number":
                    {
                        "type": "string",
                        "description": "Phone number can be masked"
                    },
                    "rider_vip":
                    {
                        "type": "object",
                        "description": "VIP status information for the rider",
                        "properties":
                        {
                            "is_vip":
                            {
                                "type": "boolean",
                                "description": "Requires coordination with Gett. Can be sent to flag whether a passenger is agreed to be treated as VIP. If true, then VIP."
                            }
                        }
                    },
                    "order_comment":
                    {
                        "type": "string"
                    },
                    "service_type":
                    {
                        "type": "string",
                        "description": "Level and type of service requested by client. One or many. Upon agreement with supplier.",
                        "enum":
                        [
                            "Economy",
                            "Standard",
                            "MPV",
                            "Executive",
                            "Premium"
                        ]
                    },
                    "price":
                    {
                        "type": "number",
                        "description": "Amount in major units like pounds, rubles, shekels of dollars. For example, two pounds and thirty five penny is 2.35.",
                        "format": "double"
                    },
                    "currency":
                    {
                        "type": "string",
                        "description": "ISO 4217 code of the currency: GBP, ILS, USD, EUR.",
                        "enum":
                        [
                            "GBP",
                            "ILS",
                            "USD",
                            "EUR"
                        ]
                    },
                    "arriving_flight_info":
                    {
                        "$ref": "#/components/schemas/models.ArrivingFlight"
                    },
                    "origin":
                    {
                        "$ref": "#/components/schemas/common_types.Location"
                    },
                    "destination":
                    {
                        "$ref": "#/components/schemas/common_types.Location"
                    },
                    "stop_points_info":
                    {
                        "$ref": "#/components/schemas/models.StopPointsInfo"
                    },
                    "preferences":
                    {
                        "$ref": "#/components/schemas/models.Preferences"
                    }
                }
            },
            "models.ReceiveOrderRequest":
            {
                "title": "ReceiveOrderRequest",
                "type": "object",
                "properties":
                {
                    "order_id":
                    {
                        "type": "string"
                    },
                    "quote_id":
                    {
                        "type": "string",
                        "description": "Optional. Provided only if Fleet previously responded to Request Quotes. request."
                    },
                    "reference_order_id":
                    {
                        "type": "string",
                        "description": "Gett order ID for reference"
                    },
                    "rider_first_name":
                    {
                        "type": "string"
                    },
                    "rider_last_name":
                    {
                        "type": "string"
                    },
                    "rider_phone_number":
                    {
                        "type": "string",
                        "description": "Phone number can be masked"
                    },
                    "rider_vip":
                    {
                        "type": "object",
                        "description": "VIP status information for the rider",
                        "properties":
                        {
                            "is_vip":
                            {
                                "type": "boolean",
                                "description": "Requires coordination with Gett. Can be sent to flag whether a passenger is agreed to be treated as VIP. If true, then VIP."
                            }
                        }
                    },
                    "order_comment":
                    {
                        "type": "string"
                    },
                    "service_type":
                    {
                        "type": "string",
                        "description": "Level and type of service requested by client. Upon agreement with supplier.",
                        "enum":
                        [
                            "Economy",
                            "Standard",
                            "MPV",
                            "Executive",
                            "Premium"
                        ]
                    },
                    "price":
                    {
                        "type": "number",
                        "description": "Amount in major units like pounds, rubles, shekels of dollars. For example 1, 2.35.",
                        "format": "double"
                    },
                    "currency":
                    {
                        "type": "string",
                        "description": "ISO 4217 code: USD, EUR.",
                        "enum":
                        [
                            "GBP",
                            "NIS",
                            "USD",
                            "EUR"
                        ]
                    },
                    "origin":
                    {
                        "$ref": "#/components/schemas/common_types.Location"
                    },
                    "destination":
                    {
                        "$ref": "#/components/schemas/common_types.Location"
                    },
                    "stop_points_info":
                    {
                        "$ref": "#/components/schemas/models.StopPointsInfo"
                    },
                    "preferences":
                    {
                        "$ref": "#/components/schemas/models.Preferences"
                    }
                }
            },
            "models.StopPoint":
            {
                "title": "StopPoint",
                "description": "Information about all stops on the order, including both pick up and drop off locations.",
                "type": "object",
                "properties":
                {
                    "id":
                    {
                        "type": "string",
                        "description": "Stop point identifier for subsequent use in Fleet Client API",
                        "example": "5b494bba-6f4d-4dc9-a8af-2881cd535e1d"
                    },
                    "address":
                    {
                        "$ref": "#/components/schemas/common_types.Address"
                    },
                    "lat":
                    {
                        "type": "number",
                        "format": "double"
                    },
                    "lng":
                    {
                        "type": "number",
                        "format": "double"
                    },
                    "stop_point_type":
                    {
                        "type": "string",
                        "example": "origin",
                        "enum":
                        [
                            "origin",
                            "on_going",
                            "destination"
                        ]
                    },
                    "planned_arrival_at":
                    {
                        "type": "string",
                        "description": "Expected time for a driver to arrive at the stop. Matches scheduled_at for the origin.",
                        "example": "2024-04-01 01:00:00.000 +01:00",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}.\\d{3} \\+\\d{2}:\\d{2}$",
                        "format": "date-time"
                    },
                    "riders":
                    {
                        "type": "array",
                        "description": "Info about all passengers to be picked up or dropped off at the stop",
                        "items":
                        {
                            "type": "object",
                            "properties":
                            {
                                "phone_number":
                                {
                                    "type": "string",
                                    "example": "972500000004"
                                },
                                "name":
                                {
                                    "type": "string",
                                    "example": "4 Pass"
                                },
                                "stop_point_action":
                                {
                                    "type": "string",
                                    "example": "pick_up",
                                    "enum":
                                    [
                                        "pick_up",
                                        "stop_by",
                                        "drop_off"
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "models.QuoteStopPoint":
            {
                "title": "StopPoint",
                "description": "Information about all stops on the order, including both pick up and drop off locations.",
                "type": "object",
                "properties":
                {
                    "address":
                    {
                        "$ref": "#/components/schemas/common_types.Address"
                    },
                    "lat":
                    {
                        "type": "number",
                        "format": "double"
                    },
                    "lng":
                    {
                        "type": "number",
                        "format": "double"
                    },
                    "stop_point_type":
                    {
                        "type": "string",
                        "example": "origin",
                        "enum":
                        [
                            "origin",
                            "on_going",
                            "destination"
                        ]
                    }
                }
            },
            "models.StopPointsInfo":
            {
                "title": "StopPointsInfo",
                "type": "object",
                "properties":
                {
                    "stop_points":
                    {
                        "type": "array",
                        "items":
                        {
                            "$ref": "#/components/schemas/models.StopPoint"
                        }
                    }
                }
            },
            "models.ArrivingFlight":
            {
                "title": "Arriving Flight Information",
                "type": "object",
                "properties":
                {
                    "flight_number":
                    {
                        "type": "string",
                        "description": "Example: \"AA0000\""
                    },
                    "airline_code":
                    {
                        "type": "string",
                        "description": "Example: \"AA\""
                    },
                    "airport_code":
                    {
                        "type": "string",
                        "description": "Example: \"LHR\" for London Heathrow. \"JFK\" for John F. Kennedy International Airport."
                    },
                    "flight_offset":
                    {
                        "type": "integer",
                        "description": "The delay in minutes between the actual landing time of a flight and scheduled_at_time"
                    }
                },
                "description": "Optional. Information in IATA format about passenger's flight.",
                "nullable": true
            },
            "models.Preferences":
            {
                "title": "Custom Preferences for a ride or a passenger/company account.",
                "type": "object",
                "properties":
                {
                    "tolls_allowed":
                    {
                        "type": "boolean",
                        "description": "Applicable to RU only. Defines if a company/passenger would like a driver to go via toll road (if possible). If true, it is expected that driver also pays for the toll road. The price is being compensated to a supplier by Gett during regular Billing cycle. Null means that feature is undefined for the current region.",
                        "nullable": true
                    },
                    "tip":
                    {
                        "$ref": "#/components/schemas/models.Preferences_tip"
                    },
                    "company_preferences":
                    {
                        "$ref": "#/components/schemas/models.Preferences_company_preferences"
                    }
                },
                "description": "Optional. Custom preferences for an order. Being defined by a client or Gett platform."
            },
            "models.QuotesRequest":
            {
                "title": "Quotes Request",
                "type": "object",
                "properties":
                {
                    "id":
                    {
                        "type": "string",
                        "description": "Quotes request ID. Will be empty on first request. Subsequent requests will contain ID returned in first response as \"id\" by partner. This is done for continuous async polling of quotes"
                    },
                    "scheduled_at":
                    {
                        "pattern": "^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}.\\d{3} \\+\\d{2}:\\d{2}$",
                        "type": "string",
                        "description": "The timestamp of arrival to pickup. Null for ASAP requests (for now)",
                        "format": "date-time"
                    },
                    "service_type":
                    {
                        "type": "string",
                        "description": "Level and type of service requested by client. Upon agreement with supplier.",
                        "enum":
                        [
                            "Economy",
                            "Standard",
                            "MPV",
                            "Executive",
                            "Premium"
                        ]
                    },
                    "currency_code":
                    {
                        "$ref": "#/components/schemas/models.currency_code"
                    },
                    "stop_points":
                    {
                        "type": "array",
                        "items":
                        {
                            "$ref": "#/components/schemas/models.QuoteStopPoint"
                        }
                    },
                    "preferences":
                    {
                        "$ref": "#/components/schemas/models.Preferences"
                    }
                }
            },
            "models.QuotesResponse":
            {
                "title": "Quotes Response",
                "type": "object",
                "properties":
                {
                    "id":
                    {
                        "type": "string",
                        "description": "Quote request ID"
                    },
                    "quotes":
                    {
                        "type": "array",
                        "items":
                        {
                            "$ref": "#/components/schemas/models.Quote"
                        }
                    },
                    "retrieving_state":
                    {
                        "type": "string",
                        "description": "IN_PROGRESS â€“ quotes production is still in progress <br>FINISHED â€“ all available quotes are produced",
                        "enum":
                        [
                            "IN_PROGRESS",
                            "FINISHED"
                        ]
                    },
                    "expiration_seconds":
                    {
                        "type": "integer"
                    }
                }
            },
            "models.Quote":
            {
                "title": "Ride Quote",
                "type": "object",
                "properties":
                {
                    "id":
                    {
                        "type": "string"
                    },
                    "min_eta":
                    {
                        "type": "integer",
                        "description": "In minutes"
                    },
                    "max_eta":
                    {
                        "type": "integer",
                        "description": "In minutes"
                    },
                    "min_price":
                    {
                        "$ref": "#/components/schemas/models.Quote_min_price"
                    },
                    "max_price":
                    {
                        "$ref": "#/components/schemas/models.Quote_max_price"
                    },
                    "surged":
                    {
                        "type": "boolean",
                        "description": "flag of high demand"
                    },
                    "currency":
                    {
                        "$ref": "#/components/schemas/models.currency_symbol"
                    },
                    "currency_code":
                    {
                        "$ref": "#/components/schemas/models.currency_code"
                    }
                }
            },
            "models.NearbyDriversRequest":
            {
                "title": "Nearby Drivers Request",
                "type": "object",
                "properties":
                {
                    "lat":
                    {
                        "type": "number",
                        "format": "double"
                    },
                    "lng":
                    {
                        "type": "number",
                        "format": "double"
                    },
                    "radius_meters":
                    {
                        "type": "integer",
                        "format": "int64"
                    },
                    "service_types":
                    {
                        "type": "array",
                        "description": "Matches the Service types from Quotes or Order requests. The request list will be limited to only 1 option at a time.",
                        "items":
                        {
                            "type": "string",
                            "enum":
                            [
                                "Economy",
                                "Standard",
                                "MPV",
                                "Executive",
                                "Premium"
                            ]
                        }
                    }
                }
            },
            "models.NearbyDriversResponse":
            {
                "title": "Quotes Response",
                "type": "object",
                "properties":
                {
                    "nearby_drivers":
                    {
                        "$ref": "#/components/schemas/models.NearbyDriversResponse_nearby_drivers"
                    }
                }
            },
            "models.NearbyDrivers":
            {
                "title": "Drivers Nearby by Service Level",
                "type": "object",
                "properties":
                {
                    "driver_id":
                    {
                        "type": "string"
                    },
                    "locations":
                    {
                        "type": "array",
                        "description": "Array of drivers",
                        "items":
                        {
                            "$ref": "#/components/schemas/models.NearbyDrivers_locations"
                        }
                    }
                }
            },
            "inline_response_400":
            {
                "type": "object",
                "properties":
                {
                    "error_code":
                    {
                        "type": "string",
                        "format": "double"
                    },
                    "error_reason":
                    {
                        "type": "string",
                        "format": "double"
                    },
                    "error_description":
                    {
                        "type": "string",
                        "format": "double"
                    }
                }
            },
            "models.Quote_min_price":
            {
                "type": "object",
                "properties":
                {
                    "base_fare":
                    {
                        "type": "number",
                        "format": "double"
                    },
                    "surge_amount":
                    {
                        "type": "number",
                        "format": "double"
                    },
                    "tax_amount":
                    {
                        "type": "number",
                        "format": "double"
                    },
                    "total_fare":
                    {
                        "type": "number",
                        "format": "double"
                    }
                },
                "description": "Min price of range. Can be equal to max if range not applicable"
            },
            "models.Quote_max_price":
            {
                "type": "object",
                "properties":
                {
                    "base_fare":
                    {
                        "type": "number",
                        "format": "double"
                    },
                    "surge_amount":
                    {
                        "type": "number",
                        "format": "double"
                    },
                    "tax_amount":
                    {
                        "type": "number",
                        "format": "double"
                    },
                    "total_fare":
                    {
                        "type": "number",
                        "format": "double"
                    }
                },
                "description": "Max price of range. Can be equal to min if range not applicable"
            },
            "models.currency_symbol":
            {
                "type": "string",
                "description": "Currency symbol for the price returned in quote. Â£, â‚ª, $, â‚¬",
                "enum":
                [
                    "Â£",
                    "â‚ª",
                    "$",
                    "â‚¬"
                ]
            },
            "models.currency_code":
            {
                "type": "string",
                "description": "Currency code for the price in quote in ISO 4217 format.",
                "enum":
                [
                    "GBP",
                    "ILS",
                    "USD",
                    "EUR"
                ]
            },
            "models.NearbyDriversResponse_nearby_drivers":
            {
                "type": "object",
                "properties":
                {
                    "Economy":
                    {
                        "type": "array",
                        "items":
                        {
                            "$ref": "#/components/schemas/models.NearbyDrivers"
                        }
                    },
                    "Standard":
                    {
                        "type": "array",
                        "items":
                        {
                            "$ref": "#/components/schemas/models.NearbyDrivers"
                        }
                    }
                },
                "description": "Structure of drivers per service type"
            },
            "models.NearbyDrivers_locations":
            {
                "type": "object",
                "properties":
                {
                    "lat":
                    {
                        "type": "number",
                        "format": "double"
                    },
                    "lng":
                    {
                        "type": "number",
                        "format": "double"
                    },
                    "bearing":
                    {
                        "type": "integer",
                        "format": "int64"
                    },
                    "timestamp":
                    {
                        "pattern": "^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}.\\d{3} \\+\\d{2}:\\d{2}$",
                        "type": "string",
                        "description": "Timestamp of location to proximate driver speed and location relevance.",
                        "format": "date-time"
                    }
                }
            },
            "models.CancelRequest":
            {
                "type": "object",
                "properties":
                {
                    "reason":
                    {
                        "type": "string",
                        "description": "Automatically generated reason of the cancellation request."
                    }
                }
            },
            "models.CancellationWithFee":
            {
                "title": "Cancellation response",
                "type": "object",
                "properties":
                {
                    "cancellation_fare":
                    {
                        "$ref": "#/components/schemas/models.CancellationWithFee_cancellation_fare"
                    }
                }
            },
            "models.CancellationWithFee_cancellation_fare_waiting_time":
            {
                "type": "object",
                "properties":
                {
                    "minutes_free":
                    {
                        "type": "integer"
                    },
                    "minutes_charged":
                    {
                        "type": "integer"
                    },
                    "waiting_time_cost":
                    {
                        "type": "number",
                        "format": "double"
                    }
                }
            },
            "models.CancellationWithFee_cancellation_fare":
            {
                "type": "object",
                "properties":
                {
                    "cancellation_base_fare":
                    {
                        "type": "number",
                        "format": "double"
                    },
                    "tax_amount":
                    {
                        "type": "number",
                        "format": "double"
                    },
                    "total_fare":
                    {
                        "type": "number",
                        "format": "double"
                    },
                    "waiting_time":
                    {
                        "$ref": "#/components/schemas/models.CancellationWithFee_cancellation_fare_waiting_time"
                    }
                },
                "nullable": true
            },
            "models.PostRideUpdate":
            {
                "type": "object",
                "properties":
                {
                    "calculation":
                    {
                        "$ref": "#/components/schemas/models.PostRideUpdate_calculation"
                    }
                }
            },
            "apiv1ride_exchangeordersync_orders":
            {
                "properties":
                {
                    "$order_ID1":
                    {
                        "type": "object"
                    },
                    "$order_ID2":
                    {
                        "type": "object"
                    },
                    "$order_IDN":
                    {
                        "type": "object"
                    },
                    "verbose":
                    {
                        "type": "boolean",
                        "description": "A flag specfying whether Gett expects in Response only status to be returned or also additional details. True is returned only if Gett understands order is Completed or Cancelled."
                    }
                },
                "description": "Structure of properties, each being formed of order_id of specific order that Gett is trying to synchronize. Each order_id structure is empty in the request."
            },
            "order_sync_body":
            {
                "properties":
                {
                    "orders":
                    {
                        "$ref": "#/components/schemas/apiv1ride_exchangeordersync_orders"
                    }
                }
            },
            "inline_response_204":
            {
                "properties":
                {
                    "supplier_status":
                    {
                        "type": "string",
                        "description": "<b>Required</b>.Status of the ride. <br>One of 'Confirmed','Waiting','Driving','Completed'.  <br>'Confirmed' - when driver accepted the ride and on the way to pickup.  <br>'Waiting' - when driver arrive to pickup and Waiting for the rider.  <br>'Driving' - when driver picked up the rider and on the way to destination. <br>'Completed' - when arrived to destination and the ride is finished, in this case there are mandatory fields in this call: 'destination','arrived_at', 'started_at', 'ended_at','total_distance_meters'",
                        "enum":
                        [
                            "Confirmed",
                            "Waiting",
                            "Driving",
                            "Completed",
                            "Cancelled",
                            "Rejected"
                        ]
                    },
                    "error_text":
                    {
                        "type": "string"
                    },
                    "completion_info":
                    {
                        "type": "object"
                    },
                    "cancellation_info":
                    {
                        "type": "object"
                    }
                }
            },
            "models.Preferences_tip":
            {
                "type": "object",
                "properties":
                {
                    "rate":
                    {
                        "type": "integer",
                        "description": "When it is agreed with a supplier to provide tip as a percentage of total final price. Gett shares a percentage upfront and expect a supplier to calculate final value and the end of the ride. Calculated tip amount is expected to be passed to a driver."
                    },
                    "amount":
                    {
                        "type": "number",
                        "description": "When it is agreed with a supplier to provide tip as an absolute amount, for example $20. It is expected that a supplier adds the amount to the final price, and passes tip to a driver.",
                        "format": "double"
                    }
                },
                "description": "For the US only. Provides either an amount or percentage of tip that a client would like to leave for a ride. Usually, it is a pre-defined preference.",
                "nullable": true
            },
            "models.Preferences_company_preferences":
            {
                "type": "object",
                "properties":
                {
                    "company_code":
                    {
                        "type": "string",
                        "description": "Used to let a supplier recognize a particular company or company type requesting a ride. Values should be pre-agreed between Gett and a partner."
                    }
                }
            },
            "models.PostRideUpdate_calculation_tips":
            {
                "type": "object",
                "properties":
                {
                    "amount_without_taxes":
                    {
                        "type": "number",
                        "format": "double"
                    },
                    "taxes":
                    {
                        "type": "number",
                        "format": "double"
                    },
                    "amount_with_taxes":
                    {
                        "type": "number",
                        "format": "double"
                    }
                }
            },
            "models.PostRideUpdate_calculation":
            {
                "type": "object",
                "properties":
                {
                    "tips":
                    {
                        "$ref": "#/components/schemas/models.PostRideUpdate_calculation_tips"
                    }
                }
            }
        },
        "responses":
        {
            "Error":
            {
                "description": "Request accepted",
                "content":
                {
                    "text/plain":
                    {
                        "schema":
                        {
                            "$ref": "#/components/schemas/inline_response_400"
                        }
                    }
                }
            }
        },
        "securitySchemes":
        {
            "ApiKeyAuth":
            {
                "type": "http",
                "scheme": "bearer",
                "description": "Authentication requires a static Bearer token provided by Gett before integration launch.\nThis token must be included in the `Authorization` header on every request.\nThe token itself does not expire but can be rotated upon request.\n\n**Format:**\n`Authorization: Bearer {your-static-gett-token}`\n\nPlease contact Gett support if you need your token or require a rotation."
            }
        }
    },
    "x-explorer-enabled": true,
    "x-proxy-enabled": true,
    "x-samples-enabled": true,
    "x-samples-languages":
    [
        "curl",
        "node",
        "ruby",
        "javascript",
        "python"
    ]
}
